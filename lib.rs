//!ToDo List:
//!
//!Decimal shifting when scales do not match.
//!
//!Update not yet updating indexes. Multi-column index use from WHERE.
//!
//!Issue with IndexCol table, colids.
//!
//!multipart requests ( for file upload ).
//!
//! Database with SQL-like language.
//! Example program:
//! ```
//! use std::net::TcpListener;
//! use database::{Database,spf::SimplePagedFile,web::WebQuery};
//! fn main() 
//! {
//!   let file = Box::new( SimplePagedFile::new( "c:\\Users\\pc\\rust\\test01.rustdb" ) );
//!   let db = Database::new( file, INITSQL );    
//!   let listener = TcpListener::bind("127.0.0.1:7878").unwrap();
//!   for tcps in listener.incoming() 
//!   {
//!     let mut tcps = tcps.unwrap();
//!     let mut wq = WebQuery::new( &tcps ); // Reads the http request from the TCP stream into wq.
//!     db.run( SQL, &mut wq ); // Executes SQL, output is accumulated in wq.
//!     wq.write( &mut tcps ); // Writes the http response to the TCP stream.
//!     db.save(); // Saves database changes to disk.
//!   }
//! }
//! const SQL : &str = "SELECT 'hello world'";
//! const INITSQL : &str = "";
//!```
//!
//!General Design of Database
//!
//!Lowest level is SortedFile which stores fixed size Records.
//!
//!SortedFile is used to implement:
//!
//!(1) Variable length values ( which are split into fragments - see bytes module ).
//!
//!(2) Database Table storage. Each record has a 64-bit Id.
//!
//!(3) Index storage ( an index record refers back to the main table ).

use std::{ panic, cell::RefCell, rc::Rc, cell::Cell, collections::HashMap };
use crate::{ value::Value, util::newmap, bytes::ByteStorage, run::FunctionPtr, compile::CompileFunc,
  table::{Table,TablePtr,TableInfo}, sql::{DataType,DataKind,ObjRef,STRING,BIGINT,TINYINT,SqlError} };

/// WebQuery struct for making a http web server.
pub mod web;

/// Structured Query Language : various types.
pub mod sql; 

/// Compile parsed expressions, checking types.
pub mod compile;

/// Simple Paged File.
pub mod spf;

/// Value.
pub mod value;

// Private modules.

/// SQL parser.
mod sqlparse;

/// Utility functions.
#[macro_use]mod util;

/// Access system tables (Schema,Table,Column,Index,IndexColumn,Function).
mod sys;

/// Sorted Record storage : SortedFile.
mod sf;

/// Page for SortedFile.
///
/// A page is 0x4000 (16kb) bytes, logically divided into up to 2047 fixed size nodes, which implement a balanced binary tree.
///
/// Nodes are numbered from 1..2047, with 0 indicating a null ( non-existent ) node.
/// 
/// Each record has a 3 byte overhead, 2 bits to store the balance, 2 x 11 bits to store left and right node ids. 
mod page;

/// Table : TableInfo, Row, other Table types.
mod table;

/// SQL execution : Instruction (Inst) and other run time types.
mod run;

/// SQL execution : EvalEnv struct.
mod eval; 

/// CExp implementations for basic expressions.
mod cexp;

/// Storage of variable length values : ByteStorage.
mod bytes;

/// Compilation of SQL builtin functions.
mod builtin;

/// ```Rc<Database>```
pub type DB = Rc<Database>;

// End of modules.

/// Database with SQL-like interface.
pub struct Database
{
  /// Page storage.
  file: Box<dyn PagedFile>,
  sys_schema: TablePtr, 
  sys_table: TablePtr,
  sys_column: TablePtr,
  sys_index: TablePtr,
  sys_index_col: TablePtr,
  /// Database is newly created.
  bs: ByteStorage,
  tables: RefCell<HashMap<ObjRef, TablePtr>>,
  schemas: RefCell<HashMap<String,i64>>,
  functions: RefCell<HashMap<ObjRef, FunctionPtr>>,
  builtins: RefCell<HashMap<String,(DataKind,CompileFunc)>>,
  functions_dirty: Cell<bool>,
  /// Last id generated by INSERT.
  lastid: Cell<i64>,
}

impl Database
{
  /// Construct a new DB, based on the specified file.
  pub fn new( file: Box<dyn PagedFile>, initsql: &str ) -> DB
  {
    let mut cq = ConsoleQuery{};
    let is_new = file.is_new();
    let mut tb = TableBuilder::new();

    let sys_schema = tb.nt( "sys", "Schema", &[ ( "Name", STRING ) ] );
    
    let sys_table = tb.nt( "sys", "Table", &[ 
       ("Root",BIGINT),
       ("Schema",BIGINT), 
       ("Name",STRING),
       ("IsView",TINYINT),
       ("Def",STRING),
       ("IdGen",BIGINT)
    ]);

    let sys_column = tb.nt( "sys", "Column", &[ 
       ( "Table", BIGINT ),
       ( "Name", STRING ),
       ( "Type", BIGINT ) 
    ]);

    let sys_index = tb.nt( "sys", "Index", &[ 
       ( "Root", BIGINT ),
       ( "Table", BIGINT ),
       ( "Name", STRING )
    ]);

    let sys_index_col = tb.nt( "sys", "IndexColumn", &[ 
       ( "Index", BIGINT ),
       ( "ColId", BIGINT )
    ]);

    sys_table.add_index( 6, vec![ 1, 2 ] );
    sys_column.add_index( 7, vec![ 0 ] );
    sys_index.add_index( 8, vec![ 1 ] );
    sys_index_col.add_index( 9, vec![ 0 ] );

    let db = Rc::new( Database
    { file, sys_schema, sys_table, sys_column, sys_index, sys_index_col,
      bs: ByteStorage::new( 0 ),
      schemas: newmap(), functions: newmap(), tables: newmap(), builtins: newmap(),  
      functions_dirty: Cell::new( false ),
      lastid: Cell::new( 0 ),
    } );

    db.bs.init( &db );  
  
    for t in &tb.list
    {
      if !is_new 
      { 
        t.id_alloc.set( sys::get_alloc( &db, t.id as u64 ) );
      }
      db.publish_table( t.clone() );
    }

    if is_new 
    {
      println!( "New database... initialising" );

      // The creation order has to match the order above ( so root values are as predicted ).
      let sysinit = "
CREATE SCHEMA sys
GO
CREATE TABLE sys.Schema( Name string )
CREATE TABLE sys.Table( Root bigint, Schema bigint, Name string, IsView tinyint, Def string, IdGen bigint )
CREATE TABLE sys.Column( Table bigint, Name string, Type bigint )
CREATE TABLE sys.Index( Root bigint, Table bigint, Name string )
CREATE TABLE sys.IndexColumn( Index bigint, ColId bigint )
GO
CREATE INDEX BySchemaName ON sys.Table(Schema,Name)
GO
CREATE INDEX ByTable ON sys.Column(Table)
CREATE INDEX ByTable ON sys.Index(Table)
CREATE INDEX ByIndex ON sys.IndexColumn(Index)
GO
CREATE TABLE sys.Function( Schema bigint, Name string, Def string )
GO
CREATE INDEX BySchemaName ON sys.Function(Schema,Name)
GO
";
      db.run( sysinit, &mut cq );
      db.run( initsql, &mut cq );
      db.save();
    }
    builtin::register_builtins( &db );
    db
  }

  /// Register a builtin function.
  pub fn register( self: &DB, name: &str, typ: sql::DataKind, cf: CompileFunc )
  {
    self.builtins.borrow_mut().insert( name.to_string(), (typ,cf) );
  }

  /// Run a batch of SQL.
  pub fn run( self: &DB, source: &str, qy: &mut dyn Query )
  {
    if let Some(e) = self.go( source, qy )
    {
      let err = format!( "Error : {} in {} at line {} column {}.", e.msg, e.rname, e.line, e.column );
      println!( "Run error {}", &err );
      qy.set_error( err );
    }
  }

  /// Run a batch of SQL, printing the execution time.
  pub fn run_timed( self: &DB, source: &str, qy: &mut dyn Query )
  {
    let start = std::time::Instant::now();
    self.run( source, qy );
    println!( "db run time={} micro sec.", start.elapsed().as_micros() );
  }

  /// Run a batch of SQL.
  fn go( self: &DB, source: &str, qy: &mut dyn Query ) -> Option<SqlError>
  {
    let mut p = sqlparse::Parser::new( source, self );
    
    let result = std::panic::catch_unwind(panic::AssertUnwindSafe( || 
    { 
      p.batch( qy ); 
    }));

    if let Err(x) = result
    {
      Some(
        if let Some(e) = x.downcast_ref::<SqlError>()
        {
          SqlError{ msg:e.msg.clone(), line: e.line, column:e.column, rname:e.rname.clone() }
        }
        else if let Some(s) = x.downcast_ref::<&str>()
        {
          p.make_error(s.to_string())
        }
        else if let Some(s) = x.downcast_ref::<String>()
        {
          p.make_error(s.to_string())
        }
        else
        {
          p.make_error("unrecognised/unexpected error".to_string())
        }
      )
    }
    else
    {
      None
    }
  }

  /// Save updated tables to file.
  pub fn save( self: &DB )
  {
    self.bs.save( self );

    let tm = &*self.tables.borrow();
    for t in tm.values()
    {
      if  t.id_alloc_dirty.get()
      {
        sys::save_alloc( self, t.id as u64,  t.id_alloc.get() );
        t.id_alloc_dirty.set( false );
      }
    }

    for t in tm.values()
    {
      t.save( self );
    }

    if self.functions_dirty.get()
    {
      for function in self.functions.borrow().values()
      {
        function.ilist.borrow_mut().clear();
      }
      self.functions.borrow_mut().clear();
      self.functions_dirty.set( false );
    }
  }

  /// Print the tables ( for debugging ).
  pub fn dump_tables( self: &DB )
  {
    println!( "Byte Storage" );
    self.bs.file.dump();

    for (n,t) in &*self.tables.borrow()
    {
      println!( "Dump Table {} {} {:?}", &n.schema, &n.name, t.info.colnames );
      t._dump( self );
    }  
  }

  /// Get the named table.
  fn get_table( self: &DB, name: &ObjRef ) -> Option< TablePtr >
  {
    if let Some( t ) = self.tables.borrow().get( name )
    {
      return Some( t.clone() );
    }
    sys::get_table( self, name ) 
  }

  /// Get the named function.
  fn get_function( self: &DB, name: &ObjRef ) -> Option< FunctionPtr >
  {
    if let Some( f ) = self.functions.borrow().get( name )
    {
      return Some( f.clone() );
    }
    sys::get_function( self, name )
  }

  /// Insert the table into the map of tables.
  fn publish_table( &self, table: TablePtr )
  {
    let name = table.info.name.clone();
    self.tables.borrow_mut().insert( name, table );
  }

  /// Encode byte slice as u64.
  fn encode( self: &DB, bytes: &[u8] ) -> u64
  {
    if bytes.len() < 16 { return 0; }
    self.bs.encode( self, &bytes[7..] )
  }

  /// Decode u64 to bytes.
  fn decode( self: &DB, code: u64 ) -> Vec<u8>
  {
    self.bs.decode( self, code )
  }

  /// Delete encoding.
  fn delcode( self: &DB, code: u64 )
  {
    self.bs.delcode( self, code );
  }

} // end impl Database

impl Drop for Database
{
  /// Clear function instructions to avoid leaking memory.
  fn drop(&mut self) 
  { 
    for function in self.functions.borrow().values()
    {
      function.ilist.borrow_mut().clear();
    }
  }
}

/// For creating system tables.
struct TableBuilder
{
  alloc: i64,
  list: Vec<TablePtr>,
}

impl TableBuilder
{
  fn new() -> Self
  {
    Self{ alloc:1, list: Vec::new() }
  }

  fn nt( &mut self, schema: &str, name: &str, ct: &[(&str,DataType)] ) -> TablePtr
  {
    let id = self.alloc;
    let root_page = id as u64;
    self.alloc += 1;
    let name = ObjRef::new( schema, name );
    let info = TableInfo::new( name, ct );
    let table = Table::new( id, root_page, 1, Rc::new(info) );
    self.list.push( table.clone() );
    table
  }
}

/// Backing storage for database tables.
pub trait PagedFile
{
  fn read_page( &self, pnum: u64, data: &mut [u8] );
  fn write_page( &self, pnum: u64, data: &[u8] );
  fn alloc_page( &self ) -> u64;  
  fn is_new( &self ) -> bool;
}

/// IO Methods.
pub trait Query
{
  /// Append SELECT values to output.
  fn push( &mut self, values: &[Value] );

  /// ARG builtin function.
  fn arg( &mut self, _kind: i64, _name: &str ) -> Rc<String> { Rc::new(String::new()) }

  /// GLOBAL builtin function.
  fn global( &self, _kind: i64 ) -> i64 { 0 }

  /// Set the error string.
  fn set_error( &mut self, err: String );

  /// Get the error string.
  fn get_error( &mut self ) -> String{ String::new() }
}

/// Query where output is printed to console.
pub struct ConsoleQuery{}

impl Query for ConsoleQuery
{
  fn push( &mut self, values: &[Value] )
  {
    println!( "{:?}", values );
  }

  /// Called when a panic ( error ) occurs.
  fn set_error( &mut self, err: String )
  {
    println!( "Error: {}", err );
  }
}